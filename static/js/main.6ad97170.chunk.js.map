{"version":3,"sources":["components/AppWrap.js","serviceWorker.js","index.js","util/crypto.js","components/Login.js","components/App.js","components/SiteNav.js","components/Register.js","components/StartConvo.js","components/Conversation.js"],"names":["AppWrap","react_default","a","createElement","BrowserRouter","basename","process","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_AppWrap","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","generatePeerId","mnemonic","Promise","resolve","reject","bip39","generateMnemonic","bip39seed","mnemonicToSeed","hmac","sha256","create","update","seed","Uint8Array","array","keys","generateKeyPairFromSeed","err","keypair","PeerId","createFromPubKey","marshalPublicKey","public","key","peerId","_idB58String","hash","_ref","Object","_Users_rob_develop_dchat_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_Users_rob_develop_dchat_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","text","options","opts","_args","arguments","wrap","_context","prev","next","length","undefined","_Users_rob_develop_dchat_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","hmacSeed","abrupt","naclUtil","decodeUTF8","digest","sig","stop","this","_x","apply","identityKeyFromSeed","bits","toBytes","publicKey","bytes","privateKey","e","Login","props","_this","_Users_rob_develop_dchat_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_Users_rob_develop_dchat_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_rob_develop_dchat_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","handleInputChange","bind","_Users_rob_develop_dchat_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6__","event","target","value","type","checked","name","setState","_Users_rob_develop_dchat_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","_this2","react__WEBPACK_IMPORTED_MODULE_7___default","className","placeholder","onChange","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","onClick","onLogin","_Users_rob_develop_dchat_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","_Users_rob_develop_dchat_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__","_Users_rob_develop_dchat_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__","registerSeed","registerSeedError","userId","chats","handleLogin","_Users_rob_develop_dchat_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_8__","handleRegenerate","handleStartChat","handleChatSend","generateRegisterSeed","Error","EXPERIMENTAL","pubsub","relay","enabled","hop","repo","concat","init","alert","data","createFromBytes","toB58String","fromByteArray","console","log","slice","ipfsInitOpts","getIpfsNodeInitOpts","node","IPFS","on","libp2p","start","ipfsRelayPeer","swarm","connect","error","_libp2pNode","handle","protocol","conn","pull","collect","msg","JSON","parse","dir","curChatState","defaultChat","chatState","_Users_rob_develop_dchat_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","messages","_Users_rob_develop_dchat_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__","id","messageId","outgoing","message","sending","failed","catch","startsWith","history","push","timestamp","Date","combinationString","toISOString","idBytes","crypto","createHash","idBytesArray","idBytesBuffer","Buffer","buffer","encoded","multihashes","encode","subject","seconds","Math","floor","nanos","flag","_this3","msgId","uuid4","peerIdFrom","updateAfterSend","map","peer","dialProtocol","payload","getChatPayload","serializedChat","stringify","once","toString","_this4","userProps","_this5","mergedProps","isLoggedIn","react__WEBPACK_IMPORTED_MODULE_9___default","_Login__WEBPACK_IMPORTED_MODULE_25__","_this6","indexRedirectPath","_SiteNav__WEBPACK_IMPORTED_MODULE_24__","react_router_dom__WEBPACK_IMPORTED_MODULE_10__","path","exact","react_router_dom__WEBPACK_IMPORTED_MODULE_11__","_Register__WEBPACK_IMPORTED_MODULE_26__","onRegenerate","requiresLogin","StartConvo","onStartChat","receiver","params","convoState","Conversation","onChatSend","_rootPB","protobuf","Root","fromJSON","jsonDescriptor","_ChatPB","root","lookupType","isTyping","withRouter","SiteNav","react__WEBPACK_IMPORTED_MODULE_5___default","react_router_dom__WEBPACK_IMPORTED_MODULE_6__","activeClassName","Register","receiverPeerId","chatText","handleChatTextKeyUp","messagesRef","React","createRef","keyCode","messagesEl","current","scrollTop","scrollHeight","nextProps","curLastMessage","nextLastMessage","offsetHeight","scrollTo","failedInfo","find","ref","statusEl","msgClass","onKeyUp"],"mappings":"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","file":"static/js/main.6ad97170.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\n\nclass AppWrap extends Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}><App /></Router>\n    );\n  }\n}\n\nexport default AppWrap;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport './index.scss';\nimport AppWrap from './components/AppWrap';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppWrap />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import bip39 from 'bip39';\nimport sha256 from 'js-sha256';\nimport { hmac, keys } from 'libp2p-crypto';\nimport PeerId from 'peer-id';\nimport naclUtil from 'tweetnacl-util';\n\nexport function generatePeerId(mnemonic) {\n  return new Promise(function(resolve, reject) {\n    if (!mnemonic) {\n      mnemonic = bip39.generateMnemonic();\n    }\n\n    const bip39seed = bip39.mnemonicToSeed(mnemonic, 'da-bears-da-champs');\n    const hmac = sha256.hmac.create('fat-ass-seed');\n    hmac.update(bip39seed);\n    const seed = new Uint8Array(hmac.array());\n    keys.generateKeyPairFromSeed('ed25519', seed, (err, keypair) => {\n      PeerId.createFromPubKey(keys.marshalPublicKey(keypair.public),\n        (err, key) => {\n          resolve({\n            mnemonic,\n            peerId: key._idB58String,\n          });\n        });\n    });     \n  });\n}\n\n/*\n * Returns a Uint8Array(64) hash of the given text.\n */\nexport const hash = async (text, options = {}) => {\n  const opts = {\n    hash: 'SHA256',\n    hmacSeed: 'ob-hash',\n    ...options\n  };\n\n  return new Promise((resolve, reject) => {\n    hmac.create(opts.hash, naclUtil.decodeUTF8(opts.hmacSeed), (err, hmac) => {\n      if (!err) {\n        hmac.digest(naclUtil.decodeUTF8(text), (err, sig) => {\n          if (!err) {\n            resolve(sig);\n            return;\n          }\n\n          reject(err);\n        });\n        return;\n      }\n\n      reject(err);\n    });\n  });\n};\n\nexport function identityKeyFromSeed(seed, bits = 4096) {\n  return new Promise((resolve, reject) => {\n    hash(seed, {\n      hmacSeed: 'ob-identity'\n    }).then(\n      sig => {\n        keys.generateKeyPairFromSeed('ed25519', sig, bits, (err, keypair) => {\n          if (!err) {\n            PeerId.createFromPubKey(keys.marshalPublicKey(keypair.public),\n              (err, peerId) => {\n                resolve({\n                  peerId: peerId.toBytes(),\n                  publicKey: keypair.public.bytes,\n                  privateKey: keypair.bytes,\n                });\n              });\n          } else {\n            reject(err);\n          }\n        });\n      },\n      e => reject(e)\n    );\n  });\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../style/util.scss';\nimport '../style/layout.scss';\nimport './Login.scss';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seed: '',\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"Login\">\n        <h1 className=\"rowLg txRt\">Who be you?</h1>\n        <input\n          type=\"text\"\n          placeholder=\"Enter your seed\"\n          className=\"width100 rowMd\"\n          name=\"seed\"\n          onChange={this.handleInputChange} />\n        <div className=\"flexVCent\">\n          <div className=\"flexNoShrink\">\n            <Link to=\"/register\">I don't have a seed 😞</Link>\n          </div>\n          <div className=\"flexHRight\">\n            <button onClick={() => this.props.onLogin(this.state.seed)}>Login</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport {\n  Route,\n  Redirect,\n  withRouter,\n} from 'react-router-dom';\nimport uuid4 from 'uuid/v4';\nimport crypto from 'crypto';\nimport protobuf from 'protobufjs';\nimport IPFS from 'ipfs';\nimport { createFromBytes } from 'peer-id'\nimport { fromByteArray } from 'base64-js';\nimport multihashes from 'multihashes';\nimport pull from 'pull-stream';\nimport {\n  generatePeerId,\n  identityKeyFromSeed,\n} from '../util/crypto';\nimport jsonDescriptor from './message.json';\nimport './App.scss';\nimport SiteNav from './SiteNav';\nimport Login from './Login';\nimport Register from './Register';\nimport StartConvo from './StartConvo';\nimport Conversation from './Conversation';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      registerSeed: null,\n      registerSeedError: null,\n      userId: null,\n      chats: {},\n    };\n\n    // this.state.chats = {\n    //   'QmVjLM8ieNfQfXGoA3E616qnQVziDk1J1Sbz2PCkFeGAay': {\n    //     messages: [\n    //       {\n    //         id: uuid4(),\n    //         outgoing: true,\n    //         msg: 'You feelin the funk or what?',\n    //         sending: false,\n    //         failed: false,\n    //       },\n    //       {\n    //         id: uuid4(),\n    //         outgoing: true,\n    //         msg: 'Hey!',\n    //         sending: false,\n    //         failed: false,\n    //       },          \n    //       {\n    //         id: uuid4(),\n    //         outgoing: false,\n    //         msg: 'No doubt trey bingo. Why dont you try it on the west end so you could see if you could consolidate the peach trea with the left-over minutia? Eh!',\n    //         sending: false,\n    //         failed: false,\n    //       },\n    //     ],\n    //     isTyping: false,\n    //   },\n    // }\n\n    this.handleLogin = this.handleLogin.bind(this);\n    this.handleRegenerate = this.handleRegenerate.bind(this);\n    this.handleStartChat = this.handleStartChat.bind(this);\n    this.handleChatSend = this.handleChatSend.bind(this);\n\n    this.generateRegisterSeed();\n  }\n\n  // need base58 peerId, base64 privateKey\n  getIpfsNodeInitOpts(peerId, privateKey) {\n    if (typeof peerId !== 'string') {\n      throw new Error('Please provide a peerId as a string.');\n    }\n\n    if (typeof privateKey !== 'string') {\n      throw new Error('Please provide a privateKey as a string.');\n    }    \n\n    return {\n      EXPERIMENTAL: {\n        pubsub: true\n      },\n      relay: {\n        \"enabled\": true,\n        \"hop\": {\n          \"enabled\": true\n        }\n      },\n      repo: `./ipfs/${peerId}`,\n      init: { privateKey },\n    }\n  }\n\n  get ipfsRelayPeer() {\n    return '/dns4/webchat.ob1.io/tcp/9999/wss/ipfs/QmSAumietCn85sF68xgCUtVS7UuZbyBi5LQPWqLe4vfwYb';\n    // // return '/ip4/127.0.0.1/tcp/4003/ws/ipfs/QmSykrDTzsUy7SMvKaZwg6gewrd2mFkbmqH5AWprAzy2HJ';\n    // return '/ip4/138.68.5.113/tcp/9005/wss/ipfs/QmPPg2qeF3n2KvTRXRZLaTwHCw8JxzF4uZK93RfMoDvf2o';\n  }\n\n  handleLogin(seed) {\n    if (!seed || typeof seed !== 'string') {\n      alert('I\\'m gonna need a seed slick willy!');\n    }\n\n    // todo: need some isLoggingIn state.\n    identityKeyFromSeed(seed)\n      .then(data => {\n        const peerId = createFromBytes(data.peerId).toB58String();\n        const privateKey = fromByteArray(data.privateKey);\n        console.log(`A seed of \"${seed.slice(0, 25)}…\" gets you this peerId: ${peerId}`);\n        const ipfsInitOpts = this.getIpfsNodeInitOpts(peerId, privateKey)\n        const node = new IPFS(ipfsInitOpts);\n\n        node.on('ready', () => {\n          node.libp2p.start((...args) => {\n            this.node = node;\n            this.setState({ userId: peerId });\n            \n            console.log(`connecting to the relay peer at ${this.ipfsRelayPeer}`);\n            node.swarm.connect(this.ipfsRelayPeer, err => {\n              if (err) {\n                alert('Unable to connect to the relay peer. Are you sure it\\'s ' +\n                  ' running?');\n                return console.error(err);\n              }\n\n              console.log('connected to relay peer');\n            });\n\n            // handle incoming messages\n            node._libp2pNode.handle('dabears/1', (protocol, conn) => {\n              console.log('pulling in incoming message');\n\n              pull(\n                conn,\n                pull.collect((err, data) => {\n                  if (err) {\n                    return console.error('There was an error pulling in an incoming chat ' +\n                      'message:', err);\n                  }\n\n                  // try {\n                  //   const decodedChatMsg = this.ChatPB.decode(data[0]);\n                  //   console.dir(decodedChatMsg);\n                  // } catch (e) {\n                  //   console.error('There was an error decoding the incoming message:', err);\n                  // }\n\n                  const msg = JSON.parse(data[0]);\n                  console.dir(msg);\n                  const curChatState = this.state.chats[msg.peerId] || this.defaultChat;\n\n                  const chatState = {\n                    ...curChatState,\n                    messages: [\n                      ...curChatState.messages,\n                      {\n                        id: msg.messageId,\n                        outgoing: false,\n                        msg: msg.message,\n                        sending: false,\n                        failed: false,\n                      },\n                    ],\n                  }\n\n                  this.setState({\n                    chats: {\n                      ...this.state.chats,\n                      [msg.peerId]: chatState,\n                    }\n                  });\n                  console.dir({\n                    chats: {\n                      ...this.state.chats,\n                      [msg.peerId]: chatState,\n                    }\n                  });\n                }),\n              );\n            });\n          });\n        });\n      })\n      .catch(e => {\n        alert(`There was an error generating your peerId: ${e.message}`);\n      });\n  }\n\n  handleRegenerate() {\n    this.generateRegisterSeed();\n  }\n\n  handleStartChat(peerId) {\n    if (typeof peerId !== 'string' || !peerId.startsWith('Qm')) {\n      alert('Please provide a valid peer id.');\n    } else if (peerId === this.state.userId) {\n      alert('We cannot condone chatting with yourself. Please try again.');\n    } else {\n      this.props.history.push(`/chat/${peerId}`);\n    }\n  }\n\n  get root() {\n    if (!this._rootPB) {\n      this._rootPB = protobuf.Root.fromJSON(jsonDescriptor);  \n    }\n\n    return this._rootPB;\n  }\n\n  get ChatPB() {\n    if (!this._ChatPB) {\n      this._ChatPB = this.root.lookupType('Chat');\n    }\n\n    return this._ChatPB;\n  }\n\n  getChatPayload(message) {\n    if (typeof message !== `string`) {\n      throw new Error('Please provide a message as a string.');\n    }\n\n    const subject = ''; // Empty subject for chat message\n    const timestamp = new Date();\n    const combinationString = `${subject}!${timestamp.toISOString()}`;\n\n    const idBytes = crypto.createHash('sha256').update(combinationString).digest();\n    const idBytesArray = new Uint8Array(idBytes);\n    const idBytesBuffer =  new Buffer(idBytesArray.buffer);\n    const encoded = multihashes.encode(idBytesBuffer,0x12);\n\n    return {\n      messageId: multihashes.toB58String(encoded),\n      subject,\n      message,\n      timestamp: { seconds: Math.floor(timestamp / 1000), nanos: 0},\n      flag: 0\n    };\n  }  \n\n  handleChatSend(peerId, msg) {\n    if (typeof peerId !== 'string' || !peerId.startsWith('Qm')) {\n      throw new Error('I need a peerId to send to.');\n    }\n\n    if (typeof msg !== 'string' || !msg) {\n      alert('Please provide a message.');\n      return;\n    }\n\n    const chatState = this.state.chats[peerId];\n\n    if (!chatState) return;\n\n    const msgId = uuid4();\n    const peerIdFrom = this.state.userId;\n\n    this.setState({\n      chats: {\n        ...this.state.chats,\n        [peerId]: {\n          ...chatState,\n          messages: [\n            ...chatState.messages,\n            {\n              id: msgId,\n              outgoing: true,\n              msg,\n              sending: true,              \n            }\n          ]\n        }\n      },\n    });\n\n    const updateAfterSend = (failed=false) => {\n      this.setState({\n        chats: {\n          ...this.state.chats,\n          [peerId]: {\n            ...this.state.chats[peerId],\n            messages: this.state.chats[peerId].messages.map(msg => {\n              if (msg.id === msgId) {\n                return {\n                  ...msg,\n                  failed,\n                  sending: false,\n                }\n              } else {\n                return msg;\n              }\n            }),\n          }\n        },\n      });      \n    }\n\n    const peer = `/p2p-circuit/ipfs/${peerId}`;\n    console.log(`will send to ${peerId} at ${peer}`);\n\n    this.node.swarm.connect(peer, err => {\n      if (err) { \n        updateAfterSend(true);\n        return console.error(err);\n      }\n\n      console.log(`connected to ${peerId}`);\n\n      this.node._libp2pNode.dialProtocol(peer, 'dabears/1', (err, conn) => {\n        if (err) { \n          updateAfterSend(true);\n          return console.error(err);\n        }\n\n        const payload = this.getChatPayload(msg);\n        // const Chat = this.ChatPB;\n        // const chat = Chat.create(payload);\n        // const serializedChat = Chat.encode(chat).finish();\n        const serializedChat = JSON.stringify({\n          ...payload,\n          peerId: peerIdFrom,\n        });\n\n        console.log('pushing outgoing message');\n        \n        pull(\n          pull.once(serializedChat),\n          conn,\n          pull.collect((err, data) => {\n            if (err) { \n              // updateAfterSend(true);\n              return console.error(err);\n            }\n            console.log('received echo:', data.toString())\n            // updateAfterSend();\n          }),            \n        );\n\n        updateAfterSend();\n      });\n    });\n  }\n\n  generateRegisterSeed() {\n    generatePeerId()\n      .then(\n        data => this.setState({\n          registerSeed: data.mnemonic,\n          registerSeedError: null,\n        }),\n        err => {\n          this.setState({\n            registerSeed: null,\n            registerSeedError: err,\n          });\n          console.error('There was an error generating the register seed.', err);\n        }\n      );\n  }\n\n  get isLoggedIn() {\n    return !!this.state.userId;\n  }\n\n  requiresLogin(Component, userProps) {\n    return props => {\n      const mergedProps = {\n        ...props,\n        ...userProps,\n      };\n\n      return this.isLoggedIn ?\n        <Component {...mergedProps} /> :\n        <Login onLogin={this.handleLogin} />;\n    }\n  }\n\n  get defaultChat() {\n    return {\n      isTyping: false,\n      messages: [],\n    };\n  }\n\n  render() {\n    const indexRedirectPath = this.isLoggedIn ?\n      '/start-chat/' : '/login/';\n    const chats = this.state.chats;\n\n    return (\n      <div className=\"App\">\n        <SiteNav chats={Object.keys(chats)} />\n        <div className=\"mainContent\">\n          <Route\n            path=\"/\"\n            exact\n            render={() => <Redirect to={indexRedirectPath} />} />\n          <Route\n            path=\"/login/\"\n            exact\n            render={\n              () => this.isLoggedIn ?\n                <Redirect to=\"/start-chat/\" /> :\n                <Login onLogin={this.handleLogin} />\n            } />\n          <Route path=\"/register/\"\n            exact\n            render={\n              props => <Register\n                seed={this.state.registerSeed}\n                onRegenerate={this.handleRegenerate} />\n            } />\n          <Route\n            path=\"/start-chat/\"\n            exact\n            render={this.requiresLogin(StartConvo,\n              { onStartChat: this.handleStartChat })} />\n          <Route\n            path=\"/chat/:receiver\"\n            exact\n            render={\n              props => {\n                const receiver = props.match.params.receiver;\n                const convoState = this.state.chats[receiver] = \n                  this.state.chats[receiver] ||\n                  this.defaultChat;\n\n                return this.requiresLogin(Conversation, {\n                  ...props,\n                  ...convoState,\n                  receiver,\n                  onChatSend: this.handleChatSend,\n                })(props);\n              }\n            } />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom'\nimport './SiteNav.scss';\n\nclass SiteNav extends Component {\n  render() {\n    return (\n      <nav className=\"SiteNav flexVCent gutterH\">\n        <div className=\"logo\"><div>🇩</div>CHAT</div> :\n        <div>\n          <NavLink to=\"/start-chat/\" activeClassName=\"active\">💬 New Chat</NavLink>\n        </div>\n        {\n          this.props.chats.map(peerId => (\n            <div key={peerId}>\n              <NavLink to={`/chat/${peerId}`} activeClassName=\"active\">{peerId.slice(0, 10)}…</NavLink>\n            </div>\n          ))\n        }\n      </nav>\n    );\n  }\n}\n\nexport default SiteNav;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../style/util.scss';\nimport '../style/layout.scss';\nimport './Register.scss';\n\nclass Register extends Component {\n  render() {\n    let seed = this.props.seed;\n\n    if (!seed) {\n      seed = <div className=\"center\">Generating…</div>;\n    }\n\n    return (\n      <div className=\"Register\">\n        <h1 className=\"rowLg txRt\">You do now!</h1>\n        <div className=\"border seed rowMd\">{seed}</div>\n        <div className=\"flexVCent\">\n          <div className=\"flexNoShrink\">\n            <a onClick={() => this.props.onRegenerate()}>Re-generate</a>\n          </div>\n          <div className=\"flexHRight\">\n            <Link to=\"/login/\">⬅️Back</Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Register;\n","import React, { Component } from 'react';\nimport './StartConvo.scss';\n\nclass StartConvo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      receiverPeerId: '',\n    };    \n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"StartConvo\">\n        <h1 className=\"rowLg txRt\">Who ya wanna chat with?</h1>\n        <input\n          type=\"text\"\n          placeholder=\"Enter a peerId\"\n          className=\"width100 rowMd\"\n          name=\"receiverPeerId\"\n          onChange={this.handleInputChange} />\n        <div className=\"flex\">\n          <div className=\"flexHRight\">\n            <button onClick={() => this.props.onStartChat(this.state.receiverPeerId)}>Chat</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default StartConvo;\n","import React, { Component } from 'react';\nimport './Conversation.scss';\n\nclass Conversation extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      chatText: '',\n    };\n    \n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleChatTextKeyUp = this.handleChatTextKeyUp.bind(this);\n\n    this.messagesRef = React.createRef();\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleChatTextKeyUp(e) {\n    if (e.keyCode === 13) {\n      this.setState({ chatText: '' });\n      this.props.onChatSend(this.props.receiver, this.state.chatText);\n    }\n  }\n\n  componentDidMount() {\n    const messagesEl = this.messagesRef.current;\n    messagesEl.scrollTop = messagesEl.scrollHeight;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const messagesEl = this.messagesRef.current;\n    const curLastMessage = this.props.messages[this.props.messages.length - 1];\n    const nextLastMessage = nextProps.messages[nextProps.messages.length - 1];\n\n    if (\n      nextLastMessage &&\n      (!curLastMessage || curLastMessage.id !== nextLastMessage.id) &&\n      messagesEl.scrollTop >= messagesEl.scrollHeight - messagesEl.offsetHeight - 15\n    ) {\n      // if we're scrolled at or very near the bottom and a new message comes\n      // in, we'll scroll down to the end.\n      this.scrollTo = messagesEl.scrollHeight;\n    }\n  }\n\n  componentDidUpdate() {\n    const messagesEl = this.messagesRef.current;\n\n    if (typeof this.scrollTo === 'number') {\n      messagesEl.scrollTop = this.scrollTo;\n    }\n\n    this.scrollTo = null;\n  }\n\n  render() {\n    const failedInfoMsg =\n      'The most likely reason in the person you are chatting with is offline. This app ' +\n      'does not support offline messages at this time. If you are sure the other party is ' +\n      'online, it\\'s possible that both your ports are blocked and you are unable to connect ' +\n      'to the relay server.';\n\n    const failedInfo =\n      this.props.messages.find(msg => msg.failed) ?\n        (\n          <div className=\"failedInfo\">\n            <a onClick={() => alert(failedInfoMsg)}>Why have some of my messages failed?</a>\n          </div>\n        ) : null;\n\n    return (\n      <div className=\"Conversation\">\n        <div className=\"chatContent rowLg\">\n          <h1>\n            {this.props.receiver.slice(0, 20)}\n            {this.props.receiver.length > 20 ? '…' : ''}\n          </h1>\n          <ul className=\"messages unstyled\" ref={this.messagesRef}>\n            {\n              this.props.messages.map(msg => {\n                let statusEl = null;\n                \n                if (msg.sending) {\n                  statusEl = <span>📡</span>\n                } else if (msg.failed) {\n                  statusEl = <span>❌</span>\n                }\n\n                const msgClass = msg.outgoing ? 'outgoing' : '';\n                return (\n                  <div  className={msgClass} key={msg.id}>\n                    <div className=\"status\">{statusEl}</div>\n                    <li>{msg.msg}</li>\n                  </div>\n                );\n              })\n            }\n          </ul>\n          <div className=\"flexVCent gutterH\">\n            <div className=\"flexExpand\">\n              <input\n                type=\"text\"\n                className=\"width100\"\n                placeholder=\"Say something clever...\"\n                name=\"chatText\"\n                value={this.state.chatText}\n                onChange={this.handleInputChange}\n                onKeyUp={this.handleChatTextKeyUp} />\n            </div>\n            <div>\n              <div className=\"flexHRight\">\n                <button onClick={\n                  () => {\n                    this.setState({ chatText: '' });\n                    this.props.onChatSend(this.props.receiver, this.state.chatText);\n                  }\n                }>Send</button>\n              </div>\n            </div>\n          </div>\n        </div>\n        {failedInfo}\n      </div>\n    );\n  }\n}\n\nexport default Conversation;\n"],"sourceRoot":""}